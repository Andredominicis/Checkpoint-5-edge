#include <WiFi.h>
#include <PubSubClient.h>
#include "DHT.h"

#define DHTPIN 15
#define DHTTYPE DHT11
#define LDRPIN 34

// Configura√ß√£o do Wi-Fi
const char* ssid = "Wokwi-GUEST";
const char* password = "";

// Configura√ß√£o do Broker MQTT P√∫blico
const char* mqtt_server = "test.mosquitto.org";
const int mqtt_port = 1883;

// T√≥picos MQTT
const char* topicTemp = "andre5623/temperatura";
const char* topicUmid = "andre5623/umidade";
const char* topicLuz  = "andre5623/luminosidade";

WiFiClient espClient;
PubSubClient client(espClient);
DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(115200);
  dht.begin();

  // Conex√£o Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Conectando-se ao WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nWiFi conectado!");

  // Conex√£o MQTT
  client.setServer(mqtt_server, mqtt_port);
  while (!client.connected()) {
    Serial.println("Conectando ao broker MQTT...");
    if (client.connect("ESP32Client")) {
      Serial.println("Conectado ao MQTT!");
    } else {
      Serial.print("Falha, rc=");
      Serial.print(client.state());
      delay(2000);
    }
  }
}

void loop() {
  if (!client.connected()) {
    while (!client.connect("ESP32Client")) {
      delay(2000);
    }
  }

  float temperatura = dht.readTemperature();
  float umidade = dht.readHumidity();
  int ldrValor = analogRead(LDRPIN);

  // Publica√ß√£o dos dados
  client.publish(topicTemp, String(temperatura).c_str());
  client.publish(topicUmid, String(umidade).c_str());
  client.publish(topicLuz,  String(ldrValor).c_str());

  Serial.println("üì° Dados enviados ao MQTT:");
  Serial.printf("Temperatura: %.1f¬∞C | Umidade: %.1f%% | Luminosidade: %d\n", temperatura, umidade, ldrValor);

  delay(5000); // Envia a cada 5 segundos
}
